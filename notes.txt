on booking route working on the form to create a booking.
--vabessa 6/4/23 18:13
on booking route, is not hitting the validate_on_submit
--vanessa 6/4/23 21:45


We need to remember to fill up errors when they cannot find the task by id
Set up conditional in backend...
"Task not found"

-- Matthew Aung 6/5/2023
Our create form works now we just need to add it to our tasker page
Maybe we can jsonify in backend by using to_dict() so that we don't have to write jsonify in front end
Need to figure out form validations in front rather than backend cause its easier
 -- Kevin 6/4/2023 12:20 PM


 we are stuck on edit componennt our store is returning an empty object for currentUser.
 we have to fix, userId in backend .



 Still need to render our edit review values so that it shows up on mount? or rendering or something like that

Still need to do reviews conditionals
fix appointment date
check and make sure updated at working as it should
--tony 6/5/2023 1930

DONT FORGET TO

    import os
    environment = os.getenv("FLASK_ENV")
    SCHEMA = os.environ.get("SCHEMA")

    '''

    if environment == "production":
        op.execute(f"ALTER TABLE taskers SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE user_messages SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE billing SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE messages SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE tasks SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE bookings SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE reviews SET SCHEMA {SCHEMA};")

    after deleting the migration file and LOOK AT THE DEBUGGING GITHUB THING BRAD SENT

--Matt 6/5/2023 21:04


We still need to adjust the migration file to accomodate the Production environment
-- Matt 6/6/2023


Maybe our edit review route needs an updated_at . ..
-- Matt 6/6/2023


Include the first_name and last_name to the taskers form soo we can query
-- Matt 6/5/2023


This is the env.py
'''

    from __future__ import with_statement

    import logging
    from logging.config import fileConfig

    from sqlalchemy import engine_from_config
    from sqlalchemy import pool

    from alembic import context

    import os
    environment = os.getenv("FLASK_ENV")
    SCHEMA = os.environ.get("SCHEMA")


    # this is the Alembic Config object, which provides
    # access to the values within the .ini file in use.
    config = context.config

    # Interpret the config file for Python logging.
    # This line sets up loggers basically.
    fileConfig(config.config_file_name)
    logger = logging.getLogger('alembic.env')

    # add your model's MetaData object here
    # for 'autogenerate' support
    # from myapp import mymodel
    # target_metadata = mymodel.Base.metadata
    from flask import current_app
    config.set_main_option(
        'sqlalchemy.url',
        str(current_app.extensions['migrate'].db.engine.url).replace('%', '%%'))
    target_metadata = current_app.extensions['migrate'].db.metadata

    # other values from the config, defined by the needs of env.py,
    # can be acquired:
    # my_important_option = config.get_main_option("my_important_option")
    # ... etc.


    def run_migrations_offline():
        """Run migrations in 'offline' mode.
        This configures the context with just a URL
        and not an Engine, though an Engine is acceptable
        here as well.  By skipping the Engine creation
        we don't even need a DBAPI to be available.
        Calls to context.execute() here emit the given string to the
        script output.
        """
        url = config.get_main_option("sqlalchemy.url")
        context.configure(
            url=url, target_metadata=target_metadata, literal_binds=True
        )

        with context.begin_transaction():
            context.run_migrations()


    def run_migrations_online():
        """Run migrations in 'online' mode.
        In this scenario we need to create an Engine
        and associate a connection with the context.
        """

        # this callback is used to prevent an auto-migration from being generated
        # when there are no changes to the schema
        # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
        def process_revision_directives(context, revision, directives):
            if getattr(config.cmd_opts, 'autogenerate', False):
                script = directives[0]
                if script.upgrade_ops.is_empty():
                    directives[:] = []
                    logger.info('No changes in schema detected.')

        connectable = engine_from_config(
            config.get_section(config.config_ini_section),
            prefix='sqlalchemy.',
            poolclass=pool.NullPool,
        )

        with connectable.connect() as connection:
            context.configure(
                connection=connection,
                target_metadata=target_metadata,
                process_revision_directives=process_revision_directives,
                **current_app.extensions['migrate'].configure_args
            )
            # Create a schema (only in production)
            if environment == "production":
                connection.execute(f"CREATE SCHEMA IF NOT EXISTS {SCHEMA}")

            # Set search path to your schema (only in production)
            with context.begin_transaction():
                if environment == "production":
                    context.execute(f"SET search_path TO {SCHEMA}")
                context.run_migrations()

    if context.is_offline_mode():
        run_migrations_offline()
    else:
        run_migrations_online()
